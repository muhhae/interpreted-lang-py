# Variable Assignment
out("Variable Assignment")
num1 = 10
num2 = num1 
num3 = num2

out("num1 : ", num1)
out("num2 : ", num2)
out("num3 : ", num3)

out()

# input 
out("Input A: ", no_break)
in(A)
out("Input B: ", no_break)
in(B)

out("A : ", A)
out("B : ", B)

out()

# Arithmethic
out("Arithmethic")
num1 = num1 + 10
num2 = num2 * num1 / 3
num3 = num1 + num2 - num3
num4 = (num1 % 3) / num2 * (num1 + 100)

out("num1 : ", num1)
out("num2 : ", num2)
out("num3 : ", num3)
out("num4 : ", num4)

out()

# String
hello = "Hello World"
gbye = "Good Bye World"
c = hello + " and " + gbye
d = (c + ", ") * 3

out("hello : ", hello)
out("gbye : ", gbye)
out("c : ", c)
out("d : ", d)

out()

#Comparison
out("num1 : ", num1)
out("num2 : ", num2)
out("num3 : ", num3)
out("num4 : ", num4)

out()

out("num1 > num2 : ",num1 > num2)
out("num2 > num3 : ",num2 > num3)
out("num3 > num4 : ",num3 > num4)

out()

# Conditional Statement

out("Conditional Statement")
if num1 > num2 and num2 > num3
    out("This statement is True: num1 > num2 and num2 > num3")
else_if num1 < num2 and num2 > num3
    out("This statement is True: num1 < num2 and num2 > num3")
else_if num1 < num2 and num2 < num3
    out("This statement is True: num1 < num2 and num2 < num3")
else_if num1 > num2 and num2 < num3
    out("This statement is True: num1 > num2 and num2 < num3")
else
    out("None of the statement above is True")
end

out()

# Loop

out("Loop")
i = 0
while i < 10
    out(i, " ", no_break)
    i = i + 1
end
out()

out()

# List
out("List")

ls_A = [-3, -2, -99, 3,1,7,6,4]

ls_B = []
ls_B[10] = NULL

out("ls_A : ", ls_A)
out("ls_B : ", ls_B)
out("sizeof ls_A : ", sizeof(ls_A))
out("sizeof ls_B : ", sizeof(ls_B))

out("\nSorting")
n = sizeof(ls_A)
i = 0
while i < n
    j = 0
    while j < n - i - 1
        if ls_A[j] > ls_A[j+1]
            tmp = ls_A[j]
            ls_A[j] = ls_A[j+1]
            ls_A[j+1] = tmp
        end
        j = j + 1
    end
    i = i + 1
end

out("ls_A : ", ls_A)

out()

# Function
out("Function")

fn sort(list)
    n = sizeof(list)
    i = 0
    while i < n
        swapped = 0
        j = 0
        while j < n - i - 1
            if list[j] > list[j+1]
                tmp = list[j]
                list[j] = list[j+1]
                list[j+1] = tmp
                swapped = 1
            end
            j = j + 1
        end
        if not swapped
            out("sorted in ", i, " iterations")
            return list
        end
        i = i + 1
    end
    out("sorted in ", i, " iterations")
    return list
end

list_example = [23, 56, -99, -3, 0.1, 45.6, 100, 23, 45, 45, 45]
sorted_list = sort(list_example)

out("list_example : ", list_example)
out("sorted_list : ", sorted_list)

# Function Support Recursion
out("Recursion")
fn fib(n)
    if n <= 0
        return 0
    else_if n == 1
        return 1
    else
        return fib(n-1) + fib(n-2)
    end
end

i = 0
while i < 10
    out(fib(i)," ", no_break)
    i = i + 1
end

out()

# Class
out("\nClass")

class tes
    fn init(a,b,c)
        this.a = a
        this.b = b
        this.c = c
    end
    
    fn print()
        out(this.a)
        out(this.b)
        out(this.c)
        out()
    end
    
    fn get()
        return this
    end
    
    fn copy_add()
        return tes(this.a + 1, this.b + 1, this.c + 1)
    end
end

fn createTes(a,b,c)
    return tes(a,b,c)
end

createTes(1,2,3).print()
createTes(1,2,3).copy_add().print()
createTes(1,2,3).copy_add().copy_add().print()
createTes(1,2,3).copy_add().copy_add().copy_add().print()
createTes(3,2,7).get().print()

tes(1,2,3).print()
tes(1,2,3).copy_add().print()
tes(1,2,3).copy_add().copy_add().print()
tes(1,2,3).copy_add().copy_add().copy_add().print()

objA = tes(34,21,90)
objB = tes(34,21,90)
objC = objA
objD = objA.get()

fn copy_tes(obj)
    return tes(obj.a, obj.b, obj.c)
end

copy_cls = copy_tes(objA)

